---
import type { FrontMatter, FrontMatterWithSlug, MDXPathKey, MDX, MDXWithSlug } from "src/types";

export function getSlug(file: string, prefix: string = "") {
  const paths = file.split("/");
  const fileName = paths.slice(-1)[0].split(".")[0];
  return `${prefix}${fileName}`;
}

// Astro.glob(path) -> path has to be literal. This is a limitation of vite's import.meta.glob()
export async function getMDXByType(type: MDXPathKey) {
  let mdxs: MDX[] = [];
  if (type === "post") {
    mdxs = await Astro.glob<FrontMatter>("../content/posts/**/*.mdx");
  } else if (type === "project") {
    mdxs = await Astro.glob<FrontMatter>("../content/projects/**/*.mdx");
  } else if (type === "snippet") {
    mdxs = await Astro.glob<FrontMatter>("../content/snippets/**/*.mdx");
  } else if (type === "about") {
    mdxs = await Astro.glob<FrontMatter>("../content/about.mdx");
  }
  const mdxPostWithSlug: MDXWithSlug[] = mdxs.map((mdx) => ({
    ...mdx,
    frontmatter: {
      ...mdx.frontmatter,
      slug: getSlug(mdx.file),
    },
  }));
  return mdxPostWithSlug;
}

export async function getMDXBySlug(type: MDXPathKey, slug: string): Promise<MDXWithSlug> {
  const mdxs = await getMDXByType(type);
  const mdx = mdxs.find((m) => m.frontmatter.slug === slug);
  if (!mdx) throw new Error(`Couldn't find mdx for slug: ${slug}`);
  return mdx;
}
---
